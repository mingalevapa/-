#!/usr/bin/env python
# coding: utf-8

# # Задачи по спискам

# 1) Создать список из чисел 31, 24, 17 тремя способами: перечисление, на основе другого списка (по сути, создать копию списка), с помощью функции range. Вывести списки на печать. Создать и вывести список, состоящий из полученных списков.

# In[1]:


a=[31,24,17]
b=list(a)
c=list(range(31,16,-7))


# In[2]:


a,b,c


# 2.1) Создать список из всех симоволов имеющихся во введенной пользователем строке.

# In[ ]:


list(input())


# 2.2) Создать список из всех слов имеющихся во введенной пользователем строке.

# In[ ]:


input().split()


# 2.3) Создать и вывести список из всех цифр, встречающихся в заданной строке.

# In[ ]:


a=list()
for i in input():
    if i in "0123456789":
        a.append(int(i))
    #if i.isdigit():
    #    a.append(int(i))


# In[ ]:


a


# In[ ]:


[int(i) for i in input() if i.isdigit()]

# 3) Если в заданный список входит слово "repeat", а последний элемент - число, то заменить список на столько же копий всех элементов, не считая последних двух (последние два просто добавить). Например, список ['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3].
# In[ ]:


a=["input", "string", "repeat", 8]
if "repeat" in a and type(a[-1])++int:
    b=a[:-2]*a[-1]+a[-2:]


# In[ ]:


b


# 4) Создать список из двух произвольных строк s1 и s2, их длин и результата проверки соблюдения лексикографического порядка (идет ли первая строка раньше второй). В зависимости от параметра output путем обращения к элементам списка выводить либо длины строк (output='lengths', в формате "Длины строк: 4 и 5"), либо описание порядка (output='order', в формате "Строка 'первая' идет ПОСЛЕ строки 'вторая'").

# In[ ]:


s1=input()
s2=input()
output='lenght'
lst=[s1,s2,len(s1),len(s2), s1>s2]
if output=='lenght':
    print(f'Длины строк: {lst[2]} и {lst[3]}')
elif output== 'order':
    ret_v= "ПОСЛЕ" if lst[-1] else ['ДО']
    print(f"Строка '{s1}' идет {ret_v} строки '{s2}'")


# 5.1) Запросить у пользователя 2 целых положительных числа и сохранить их в переменных max_val, repeat. Создать  список из целых чисел со  значениями от 1 до max_val включительно повторяющийся repeat раз.
# 
# Например для max_val=4, repeat=4 будет создан список:
# 
# [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,]

# In[ ]:


max_var=int(input())
repeat=int(input())
list(range(1, max_var+1))*repeat


# 5.2) На основе списка из 5.1 созданного при max_val = 10 создать его копию (значение repeat заранее неизвестно). В копии с помощью среза удалить 80% элементов из середины. Все элементы исходного списка, которые не сохранены в скопированном списке, умножить на десять.

# In[ ]:


lst[len(lst)//4:len(lst)*3//4+1]


# 6) Из произвольной строки создать список. Вместо каждой буквы "s" (без учета регистра), стоящей не на первом и не на последнем месте, вставить в список строку из двойного предыдущего символа и одного следующего. Например, из строки "test\_Stringss" должен получиться список ['t', 'e', 'eet', 't', '\_', '\__t', 't', 'r', 'i', 'n', 'g', 'ggs', 's'].

# In[ ]:


string='test_Stringss'
lst=[]
for i, e in enumerate(string):
    if i==0 or i==len(string)-1:
        ret=e
    elif e.lower()=='stop':
        ret=string[i-1]*2+string[i+1]
    else:
        ret=e
    lst.append(ret)
lst


# 7)* Организовать заполнение списка заданной длины пользователем через input(). Если на вход подается число (целое или через точку), то записывать в список целое число с округлением вверх. Если "True" или "False", то как boolean. Иначе - как строку.

# In[ ]:


lst=[]
while True:
    a=input()
    if a.lower()=='stop':
        print('interrupted')
        break
    elif a=='True':
        lst.append(True)


# --------------

# 8) Заданы две заранее неизвестные строки в которых слова разделены пробелами. Из двух строк составить одну, в котрой слова из первой и второй строки будут чередоваться при этом порядок слов будет сохранен. Ели количество слов в строках различное, то закончить создание составной строки как только слова в одной из исходных строк закончатся. Для преобразований использовать списки слов.
# 
# Пример: 'один два три', 'альфа бетта гамма' -> 'один альфа два бетта три гамма'

# In[ ]:


string='один два три'
string2='альфа бета гамма'
string=string.split()
string2=string2.split()
length=len(string) if len(string)<len(string2) else len(string2)
lst=[]
for i in range(length):
    lst.append(string[i])
    lst.append(string2[i])
lst=' '.join(lst)
lst


# 9) Решить здачу 8 используя функцию zip.

# In[ ]:


string='один два три'
string2='альфа бета гамма'
string=string.split()
string2=string2.split()
zipp=list(zip(string,string2))
res=''
for i in zipp:
    res+='{} {}'.format(*i)
res


# 10) Выполнить циклический сдвиг слов в произвольной строке (слова разделены пробелами) на заднное пользователем число слов. Решить с помощью списков слов.
# 
# Пример "один два три четыре пять шесть семь", 3 -> "четыре пять шесть семь один два три"

# 11) В списке целых чисел из диапозона от 1 до 20 заменить все числа не являющиеся простыми на составляющие их простые множители (которые включаются в виде отдельных элементов списка на место исключаемого числа). Каратные простые множетели добавлять количество раз составляющее их кратность в исходном числе.
# 
# Пример: [3, 6, 7, 12] -> [3, 2, 3, 7, 2, 2, 3]

# 12) В списке, состоящем из чисел найти значение меньше или равно которому только одно значения из списка.

# 13) Найти индекс в списке для значения, найденного в задаче 12.

# 14) Найти индекс второго с конца вхождения значения 1 в список из целых чисел.ь

# 15) Реализовать функцию умножения двух матриц, записанных как список списков. Проверить на умножении матрицы на единичную матрицу.

# 16) Создать копию матрицы, записанной в виде вложенных списков, так что при изменении элементов исходной матрицы, скопированная матрица меняться не будет. 

# In[ ]:


import copy


# In[ ]:


matrix=[[1,2,3],[4,5,6]]
matrix_new=copy.deepcopy(matrix)


# In[ ]:


matrix_new


# 17) Осортировать слова в строке (с пробелом в качестве разделителя) в лексикографическом порядке.
# 
# Пример: 'дыня абрикос яблоко арбуз' -> 'абрикос арбуз дыня яблоко'

# 18) Имеется переменная lsls содержащая список списков. Заранее неизвестно, сколько в переменной списков и какой они длинны (их длинны в общем случае различны). Из этих списков составить список, содержащий поорчедно элементы каждого из вложенных списков, при этом, порядок этих элементов сохраняется. Процедура создания списка останавливается когда хотя бы в одном из исходных вложенных списков будут использованные все элементы. Кроме составленного списка получить список из всех элементов не вошедших в составленный список.
# 
# Пример: lsls=[[1,2,3],['a', 'b'], [30, 40, 50, 60]] -> [1, 'a', 30, 2, 'b', 40], [3, 50, 60]
