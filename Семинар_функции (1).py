#!/usr/bin/env python
# coding: utf-8

# ## Семинар 9

# 5.1) Написать задокументированную функцию умножения двух чисел. Для каких типов данная функция будет возвращать практически ценный результат? Написать примеры использования этой функции.

# In[1]:


def c(a,b):
    """Умножение"""
    print(a,"*",b,"=",a*b)


# In[2]:


c(37,10)
c(23.4,4.8)
c("vhjnj",4)


# 5.2) Написать  функцию умножения принимающую от одного до трех параметров. Написать примеры использования этой функции с разным количеством параметров.

# In[6]:


def c(a,b=1,c=1):
    """Умножение"""
    print(a,"*",b,"*",c,"=",a*b*c)


# In[7]:


c(84)
c(9,10)
c(1,"djjec",3)


# 5.3) Функцию из задания 2 вызвать с приведенными ниже аргументами. Для случая a4 выбрать 3 первых и 3 последних значения.
# 
# a1 = (15, 10 ,5)
# 
# a2 = (3, 1)
# 
# a3 = [2, 35, 55]
# 
# a4 = (5, 10 ,15, 20)

# In[25]:


def c(a,b=1,c=1):
    """Умножение"""
    print(a,"*",b,"*",c,"=",a*b*c)


# In[26]:


a1=(15, 10 ,5)
a2=(3,1)
a3=[2, 35, 55]
a4=(5, 10 ,15, 20)


# In[27]:


print(c(*a1))
print(c(*a2))
print(c(*a3))
print(c(*a4[:3]))
print(c(*a4[-3:]))


# 5.4) Реализовать функцию умножения, принимающую неограниченное количество значений. Написать примеры использования этой функции, в том числе с аргументами из задания 3.

# In[22]:


def multiply(*args):
    if len(args)==0:
        return
    else:
        rez=1
        for i in args:
            rez*=i
    return rez


# 5.5) Реализовать функции для выполнения четырех арифмитических операций преобразующих целые числа в целое число. Создать словарь с функциями и соответствующими им символами операций. Для двух заранее заданных целых чисел (например 25 и 4) выполнить выбранную пользователем арифметическую операцию. 

# In[ ]:


dicti={
    "+":lambda x,y:x+y
    "-":lambda x,y:x-y
    "*":lambda x,y:x*y
    "/":lambda x,y:x/y
}


# In[ ]:


dicti["+"](2,5)


# 5.6) Написать калькулятор для строковых выражений вида '<число> <операция> <число>', где <число> - целое число, например 113, <арифмитическая операция> - одна из операций +,-,\*,/(деление нацело),%(остаток от деления),^(возведение в степень). Пример calc('13 - 5') -> 8

# In[ ]:


def calculator(string):
    calc_dict={"+":lambda x,y:x+y
               "-":lambda x,y:x-y
               "*":lambda x,y:x*y
               "/":lambda x,y:x/y}
    string=string.split()
    return calc_dict[string[1]](int(string[0]),int(string[-1]))


# 5.6.2) Написать калькулятор calc_op(s, oper_d), который принимает параметр s -  строковые выражения вида '<число> <операция> <число>', где <число> - целое число, например 113, <операция> - операция, которая кодируется одной буковой (например: p,m и т.п.); oper_d - словарь операций, в котором каждой из рассматриваемых символов операций сопоставлена функция ее рассчета. 
# 
# Пример calc_op('2 s 10', {'s': lambda x,y: x\*\*y }) -> 1024

# In[ ]:


def calc_op(s, oper_d):
    s=s.split()
    return open_d[s[1]](int(s[0]),int(s[-1]))
calc_op('2 s 10', {'s': lambda x,y: x**y })


# 5.7) Реализовать функцию которая выводит на экран сообщение вида:
# 
# 'Автомобиль марки: BMW, модели: X5, цвета: белый, 2006 года выпуска, с пробегом: 215 000 км, c номерным знаком: X012АМ77, цена: 1 115 000 руб.'
# 
# В функцию передаются именованные параметры изменяемой части сообщения, лубой из параметров может быть не задан пользователем функции и автоматически заменен на разумное сообщение в соответствующей части строки. Получить вывод текстового сообщения для словарей c1, c2.

# In[ ]:


def func(car='BMW', model='X5', color='белый', nunber='X012AM77', price='1115000 руб', prod_year='2006', mileage='215000 км'):
    return f'Автомобиь марки: {car}, модели{model}, цвета{color}, {prod_year} года выпуска, с пробегом:{mileage}, с номером:{number}


# In[ ]:


# 5.8) Написать функцию, которая преобразует целое число (от 0 до 99) в текстовое написание числа на русском языке. Пример: to_text(15) -> 'Пятнадцать'
    


# In[ ]:


def to_text(number):
    def discharge(number):
        return
    dict1={
        0:'ноль'
        1:'один'
        2:'два'
        3:'три'
        4:'четыре'
        5:'пять'
        6:'шесть'
        7:'семь'
        8:'восемь'
        9:'девять'
    }
    dict2={
        10:'десять'
        11:'одиннадцать'
        12:'двенадцать'
        13:'тринадцать'
        14:'четырнадцать'
        15:'пятнадцать'
        16:'шестнадцать'
        17:'семнадцать'
        18:'восемнадцать'
        19:'девятнадцать'
    }
    dict3={
        20:'двадцать'
        30:'тридцать'
        40:'сорок'
        50:'пятьдесят'
        60:'шестьдесят'
        70:'семьдесят'
        80:'восемьдесят'
        90:'девяносто'
    }
    if number<20:
        if number<10:
            return dict1[number]
        else:
            return dict2[number]
    else:
        des, edin=discharge(number)
        if edin==0:
            return dict3[des]
        else:
            return f'{dict3[des]} {dict1[edin]}


# 5.9) Написать функцию, которая преобразует целое число (от 0 до 999) из текстового представления на руссокм языке в число типа int. Пример: to_int('тридцать три') -> 33

# In[ ]:





# 5.9.2) Написать функцию, которая преобразует целое число (от 0 до 999) из текстового представления на руссокм языке в число типа int. И сообщает об ошибках (выводит на экран описание типа ошибки и возвращает чило -1). 
# 
# Пример: to_int('тридцать три') -> 33
# 
# Пример: to_int("сто сорок тридцать два сто") -> -1 Вывод: тридцать - некорректное расположение в числе.

# In[ ]:





# 5.10) Задан список словарей:
# 
# dl = [{'a': 10, 'b': 20, 'c': 1}, {'a': 5, 'b': 10, 'z': 10}, {'a': 3, 'y': 7}]
# 
# с помощью анонимной функции отсортировать словари по значению, содержащемуся по ключу 'a'

# In[15]:


d1=[{'a': 10, 'b': 20, 'c': 1}, {'a': 5, 'b': 10, 'z': 10}, {'a': 3, 'y': 7}]
d1.sort(key=lambda x: x['a'])


# In[14]:


d1

